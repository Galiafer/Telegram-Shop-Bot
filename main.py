import random
from datetime import datetime

import pymysql.cursors
import openpyxl
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from aiogram.contrib.middlewares.logging import LoggingMiddleware
from aiogram import Bot, Dispatcher, executor, types
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters.state import State, StatesGroup
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton, InlineKeyboardMarkup, InlineKeyboardButton, ContentType
from aiogram.utils.exceptions import MessageTextIsEmpty
from aiogram.utils.markdown import hbold
import zlib

from config import BOT_TOKEN, HOST, PORT, USER, PASSWORD, DB_NAME, DEFAULT_PARSE_MODE, SUPPORT_USERNAME, SHOP_NAME, \
    ADMIN_ID, CREATION_TIME, CHANNEL_LINK, RULES
from qiwi import QIWIManager

bot = Bot(token=BOT_TOKEN)
dp = Dispatcher(bot, storage=MemoryStorage())
dp.middleware.setup(LoggingMiddleware())
QIWI = QIWIManager()


def connect(db_name=None):
    try:
        connection_ = pymysql.connect(
            host=HOST,
            port=PORT,
            user=USER,
            password=PASSWORD,
            database=db_name,
            cursorclass=pymysql.cursors.DictCursor
        )

        print("Connection Successful")
        return connection_
    except Exception as err:
        print("Connection was failed")
        print(err)


def get_data_from_xlsx(file_path):
    document = openpyxl.load_workbook(file_path).active
    data = []
    for row in document.rows:
        temp = []
        for cell in row:
            temp.append(cell.value)
        data.append(temp)

    del data[0]
    return data


connection = connect(DB_NAME)
cursor = connection.cursor()

main_keyboard = ReplyKeyboardMarkup(row_width=2, keyboard=[
    [
        KeyboardButton("–ö—É–ø–∏—Ç—å —Ç–æ–≤–∞—Ä"),
        KeyboardButton("–ù–∞–ª–∏—á–∏–µ —Ç–æ–≤–∞—Ä–∞")
    ],
    [
        KeyboardButton("–ü—Ä–æ—Ñ–∏–ª—å"),
        KeyboardButton("–û –º–∞–≥–∞–∑–∏–Ω–µ")
    ],
    [
        KeyboardButton("–ü—Ä–∞–≤–∏–ª–∞"),
        KeyboardButton("–ü–æ–º–æ—â—å")
    ]
], resize_keyboard=True)
admin_inline_keyboard = InlineKeyboardMarkup(row_width=1, inline_keyboard=[
    [InlineKeyboardButton("–î–æ–±–∞–≤–∏—Ç—å —Ç–æ–≤–∞—Ä", callback_data="add_product")],
    [InlineKeyboardButton("–û–±–Ω–æ–≤–∏—Ç—å —Ç–æ–≤–∞—Ä", callback_data="update_product")],
    [InlineKeyboardButton("–£–¥–∞–ª–∏—Ç—å —Ç–æ–≤–∞—Ä", callback_data="delete_product")],
    [InlineKeyboardButton("–£–¥–∞–ª–∏—Ç—å –≤–µ—Å—å —Ç–æ–≤–∞—Ä", callback_data="delete_all_products")]
])


class States(StatesGroup):
    add_product = State()

    change_category = State()
    change_name = State()
    change_description = State()
    change_price = State()
    change_amount = State()
    change_content = State()

    qiwi = State()


@dp.message_handler(text="–ö—É–ø–∏—Ç—å —Ç–æ–≤–∞—Ä")
async def buy_product(message: types.Message):
    cursor.execute(f"SELECT category FROM `products`")
    categories = cursor.fetchall()
    keyboard = InlineKeyboardMarkup(row_width=1, inline_keyboard=[
        [InlineKeyboardButton(text=categories[i]["category"], callback_data=f"buy_product_{categories[i]['category']}")]
        for i in range(len(categories))
    ])
    await message.reply(text=f"{hbold('–ê–∫—Ç–∏–≤–Ω—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –≤ –º–∞–≥–∞–∑–∏–Ω–µ:')}", reply_markup=keyboard,
                        parse_mode=DEFAULT_PARSE_MODE)


@dp.callback_query_handler(text_startswith='buy_product')
async def but_product(callback_data: types.CallbackQuery):
    _, _, category = callback_data.data.split("_")
    cursor.execute(f"SELECT * from `products` WHERE category='{category}'")
    products_data = cursor.fetchall()
    keyboard = InlineKeyboardMarkup(row_width=1, inline_keyboard=[
        [InlineKeyboardButton(
            text=f"{products_data[i][name]} | {products_data[i][price]} ‚ÇΩ | –ö–æ–ª-–≤–æ: {str(products_data[i][amount]) + ' —à—Ç' if products_data[i][amount] > 0 else '0 —à—Ç'}.",
            callback_data=f"b_{products_data[i][name]}_{products_data[i][category_]}")]
        for i in range(len(products_data)) for _, category_, name, _, price, amount, _ in products_data
    ])
    keyboard.add(InlineKeyboardButton(f"–ù–∞–∑–∞–¥ –∫–æ –≤—Å–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º", callback_data="back_to_all"))
    await callback_data.message.edit_text(text=f"{hbold('–î–æ—Å—Ç—É–ø–Ω—ã–µ —Ç–æ–≤–∞—Ä—ã –≤ —Ä–∞–∑–¥–µ–ª–µ ' + category + ' :')}",
                                          reply_markup=keyboard,
                                          parse_mode=DEFAULT_PARSE_MODE)


@dp.callback_query_handler(text="back_to_all")
async def back_to_all(callback_query: types.CallbackQuery):
    cursor.execute(f"SELECT category FROM `products`")
    categories = cursor.fetchall()
    keyboard = InlineKeyboardMarkup(row_width=1, inline_keyboard=[
        [InlineKeyboardButton(text=categories[i]["category"], callback_data=f"buy_product_{categories[i]['category']}")]
        for i in range(len(categories))
    ])
    await callback_query.message.edit_text(text=f"{hbold('–ê–∫—Ç–∏–≤–Ω—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –≤ –º–∞–≥–∞–∑–∏–Ω–µ:')}", reply_markup=keyboard,
                                           parse_mode=DEFAULT_PARSE_MODE)

@dp.callback_query_handler(text_startswith="back_")
async def go_back(callback_data: types.CallbackQuery):
    _, category = callback_data.data.split("_")
    cursor.execute(f"SELECT * from `products` WHERE category='{category}'")
    products_data = cursor.fetchall()
    keyboard = InlineKeyboardMarkup(row_width=1, inline_keyboard=[
        [InlineKeyboardButton(
            text=f"{products_data[i][name]} | {products_data[i][price]} ‚ÇΩ | –ö–æ–ª-–≤–æ: {str(products_data[i][amount]) + ' —à—Ç' if products_data[i][amount] > 0 else '0 —à—Ç'}.",
            callback_data=f"b_{products_data[i][name]}_{products_data[i][category_]}")]
        for i in range(len(products_data)) for _, category_, name, _, price, amount, _ in products_data
    ])
    keyboard.add(InlineKeyboardButton(f"–ù–∞–∑–∞–¥ –∫–æ –≤—Å–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º", callback_data="back_to_all"))
    await callback_data.message.edit_text(text=f"{hbold('–î–æ—Å—Ç—É–ø–Ω—ã–µ —Ç–æ–≤–∞—Ä—ã –≤ —Ä–∞–∑–¥–µ–ª–µ ' + category + ' :')}",
                                          reply_markup=keyboard,
                                          parse_mode=DEFAULT_PARSE_MODE)

@dp.callback_query_handler(text_startswith='b_')
async def but_product_data(callback_data: types.CallbackQuery):
    _, name, category = callback_data.data.split("_")
    cursor.execute(f"SELECT description from `products` WHERE name='{name}' AND category='{category}' AND id=1")
    descr = dict(cursor.fetchone())["description"]
    cursor.execute(f"SELECT amount from `products` WHERE name='{name}' AND category='{category}' AND id=1")
    amount = dict(cursor.fetchone())["amount"]
    cursor.execute(f"SELECT price from `products` WHERE name='{name}' AND category='{category}' AND id=1")
    price = dict(cursor.fetchone())["price"]

    keyboard = [
        [InlineKeyboardButton(str(i + 1), callback_data=f"pc_{category}_{name}_{i + 1}_{price}") for i
         in range(int(amount))],
        [InlineKeyboardButton(f"–ù–∞–∑–∞–¥", callback_data=f"back_{category}")],
        [InlineKeyboardButton(f"–ù–∞–∑–∞–¥ –∫–æ –≤—Å–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º", callback_data=f"back_to_all")]]

    text = f"üìÉ {hbold('–¢–æ–≤–∞—Ä')}: {name}\nüí∞ {hbold('–¶–µ–Ω–∞')}: {price} ‚ÇΩ\nüìÉ {hbold('–û–ø–∏—Å–∞–Ω–∏–µ')}: {descr}"
    await callback_data.message.edit_text(text,
                                          reply_markup=InlineKeyboardMarkup(row_width=5, inline_keyboard=keyboard),
                                          parse_mode=DEFAULT_PARSE_MODE)


@dp.callback_query_handler(text_startswith='pc_')
async def but_processing(callback_data: types.CallbackQuery):
    _, category, name, amount, price = callback_data.data.split("_")
    cursor.execute(f"SELECT description from `products` WHERE name='{name}' AND category='{category}' AND id=1")
    descr = dict(cursor.fetchone())["description"]

    text = f"üìÉ {hbold('–¢–æ–≤–∞—Ä')}: {name}\nüí∞ {hbold('–¶–µ–Ω–∞')}: {price} ‚ÇΩ\nüìÉ {hbold('–û–ø–∏—Å–∞–Ω–∏–µ')}: {descr}"

    await callback_data.message.edit_text(text, reply_markup=InlineKeyboardMarkup(row_width=1, inline_keyboard=[
        [InlineKeyboardButton(f"QIWI", callback_data=f"qw_{amount}_{name}_{category}")],
        [InlineKeyboardButton(f"–ù–∞–∑–∞–¥", callback_data=f"back_{category}")]
    ]), parse_mode=DEFAULT_PARSE_MODE)


@dp.callback_query_handler(text_startswith='qw_')
async def qiwi(callback_data: types.CallbackQuery):
    _, amount, name, category = callback_data.data.split("_")
    user_id = callback_data.from_user.id
    bill_id = random.randint(1, 9999999)
    cursor.execute(f"SELECT content from `products` WHERE name='{name}' AND category='{category}' AND id=1")
    content = dict(cursor.fetchone())["content"]
    cursor.execute(f"SELECT price from `products` WHERE name='{name}' AND category='{category}' AND id=1")
    price = dict(cursor.fetchone())["price"]
    cursor.execute(
        "INSERT INTO `purchases`(user_id, bill_id, content, product_category, product_name, paid) VALUES (%s, %s, %s ,%s, %s, %s)",
        (user_id, bill_id, content, category, name, False))
    connection.commit()

    bill = await QIWI.create_payment(amount=int(amount) * price,
                                     comment=f"{user_id}_{bill_id}")

    products_markup = InlineKeyboardMarkup(row_width=3, inline_keyboard=[
        [InlineKeyboardButton(f"–ü–µ—Ä–µ–π—Ç–∏ –∫ –æ–ø–ª–∞—Ç–µ", url=bill.pay_url)],
        [InlineKeyboardButton(f"–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –æ–ø–ª–∞—Ç—É",
                              callback_data=f"check_{bill_id}_{user_id}_{amount}")],
        [InlineKeyboardButton(f"–û—Ç–º–µ–Ω–∏—Ç—å –∑–∞–∫–∞–∑", callback_data=f"cancelPayment_{bill_id}")],
    ])
    text = f"‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ\n" \
           f"üìÉ {hbold('–¢–æ–≤–∞—Ä')}: {name}\n" \
           f"üí∞ {hbold('–¶–µ–Ω–∞')}: {1} ‚ÇΩ\n" \
           f"üì¶ {hbold('–ö–æ–ª - –≤–æ')}: {amount} —à—Ç.\n" \
           f"üí° {hbold('–ó–∞–∫–∞–∑')}: {bill_id}\n" \
           f"üïê {hbold('–í—Ä–µ–º—è –∑–∞–∫–∞–∑–∞')}: {datetime.now().strftime('%D %H:%M:%S')}\n" \
           f"üïê {hbold('–ò—Ç–æ–≥–æ–≤–∞—è —Å—É–º–º–∞')}: {int(amount) * price} ‚ÇΩ\n" \
           f"üí≤ {hbold('–°–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã')}: QIWI\n" \
           f"‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ\n" \
           f"{hbold('–ü–µ—Ä–µ–π–¥–∏—Ç–µ –ø–æ –∫–Ω–æ–ø–∫–µ –¥–ª—è –æ–ø–ª–∞—Ç—ã')}\n" \
           f"‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ"

    await callback_data.message.edit_text(text=text, reply_markup=products_markup, parse_mode=DEFAULT_PARSE_MODE)

@dp.callback_query_handler(text_startswith='cancelPayment_')
async def cancelPayment(callback_data: types.CallbackQuery):
    _, bill_id = callback_data.data.split("_")
    text = f"–ü–ª–∞—Ç–µ–∂ —Å —É–Ω–∏–∫–∞–ª—å–Ω—ã–º –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä–æ–º : #{bill_id} –±—ã–ª –æ—Ç–º–µ–Ω–µ–Ω"
    await callback_data.message.answer(text)
    await callback_data.message.delete()

@dp.callback_query_handler(text_startswith="check_")
async def check_payment(callback_data: types.CallbackQuery):
    _, bill_id, user_id, amount = callback_data.data.split("_")

    cursor.execute(f"SELECT * from `purchases` WHERE bill_id={bill_id} AND user_id={user_id}")
    purchases = dict(cursor.fetchone())
    if len(purchases) > 0:
        if await QIWI.check_payment(f"{user_id}_{bill_id}") == QIWI.paid:
            cursor.execute(f"SELECT * from `users` WHERE user_id={user_id}")
            user = dict(cursor.fetchone())
            purchases_ = user["purchases"]

            content = purchases["content"].split(";")
            output = ";".join([content[i] for i in range(0, int(amount))])
            for i in range(0, int(amount)):
                del content[0]

            content = ';'.join(content)
            cursor.execute(
                f"UPDATE `purchases` SET paid=True, content='{output}' WHERE user_id={user_id} AND bill_id={bill_id}")
            connection.commit()
            cursor.execute(
                f"UPDATE `products` SET amount={len(purchases['content'].split(';')) - int(amount)}, content='{content}' WHERE category='{purchases['product_category']}' AND name='{purchases['product_name']}' AND id=1")
            connection.commit()
            cursor.execute(f"UPDATE `users` SET purchases={purchases_ + 1} WHERE user_id={user_id}")
            connection.commit()
            await callback_data.message.edit_text(f"–ó–∞–∫–∞–∑ –Ω–æ–º–µ—Ä #{bill_id}\n" + '\n'.join(o for o in output.split(';')))
        else:
            await callback_data.message.answer("–û–ø–ª–∞—Ç–∏—Ç–µ —Ç–æ–≤–∞—Ä")


@dp.message_handler(text="–ù–∞–ª–∏—á–∏–µ —Ç–æ–≤–∞—Ä–∞")
async def products_in_store(message: types.Message):
    cursor.execute("SELECT * from `products`")
    products = cursor.fetchall()

    categories = {products[i][category]: [] for i in range(len(products)) for _, category, _, _, _, _, _ in products}
    for product in products:
        product = dict(product)
        categories[product["category"]].append([product["name"], product["price"], product["amount"]])

    text = []
    for key in categories.keys():
        text.append(f"‚ûñ‚ûñ‚ûñ {key} ‚ûñ‚ûñ‚ûñ\n")
        for product in categories[key]:
            product_name, price, amount = product
            text.append(f"{hbold(product_name)} | {hbold(price)} ‚ÇΩ | {hbold(amount)}  —à—Ç.\n")
        text.append("\n\n")
    try:
        await message.reply(text="".join(text), parse_mode=DEFAULT_PARSE_MODE)
    except MessageTextIsEmpty:
        await message.reply(text="–í–µ—Å—å —Ç–æ–≤–∞—Ä –∑–∞–∫–æ–Ω—á–∏–ª—Å—è, –ø—Ä–∏–Ω–æ—Å–∏–º —Å–æ–≤–∏ –∏–∑–≤–∏–Ω–µ–Ω–∏—è", parse_mode=DEFAULT_PARSE_MODE)


@dp.message_handler(text="–ü—Ä–æ—Ñ–∏–ª—å")
async def profile(message: types.Message):
    cursor.execute(f"SELECT * from `users` WHERE user_id={message.from_user.id}")
    user_data = dict(cursor.fetchone())
    text = f"‚ù§ {hbold('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å')}: @{user_data['username'] if user_data['username'] is not None else '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'}\n" \
           f"üí∏ {hbold('–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–∫—É–ø–æ–∫')}: {user_data['purchases'] if user_data['purchases'] is not None else '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'}\n" \
           f"üîë {hbold('ID')}: {user_data['id'] if user_data['id'] is not None else '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'}"

    keyboard = InlineKeyboardMarkup(row_width=1, inline_keyboard=[
        [InlineKeyboardButton("–ò—Å—Ç–æ—Ä–∏—è –∑–∞–∫–∞–∑–æ–≤", callback_data="history")],
    ])
    await message.reply(text=text, reply_markup=keyboard, parse_mode=DEFAULT_PARSE_MODE)


@dp.callback_query_handler(text='history')
async def show_history(callback_data: types.CallbackQuery):
    cursor.execute(f"SELECT * from `purchases` WHERE user_id={callback_data.from_user.id}")
    purchases_data = cursor.fetchall()
    print(purchases_data)
    if len(purchases_data) <= 0:
        await callback_data.message.reply(text=f"{hbold('–í—ã –µ—â–µ –Ω–µ —Å–æ–≤–µ—Ä—à–∞–ª–∏ –ø–æ–∫—É–ø–æ–∫ :(')}",
                                          parse_mode=DEFAULT_PARSE_MODE)
    else:
        keyboard = InlineKeyboardMarkup(row_width=1, inline_keyboard=[
            [InlineKeyboardButton(text=f"#{purchases_data[i]['bill_id']}",
                                  callback_data=f"show-history-{purchases_data[i]['bill_id']}-{purchases_data[i]['content']}")]
            for i in range(len(purchases_data))
        ])
        await callback_data.message.reply(text=f"{hbold('–í–∞—à–∏ –ø–æ–∫—É–ø–∫–∏:')}", reply_markup=keyboard,
                                          parse_mode=DEFAULT_PARSE_MODE)


@dp.callback_query_handler(text_startswith='show-history')
async def show_history_products(callback_data: types.CallbackQuery):
    _, _, bill_id, content = callback_data.data.split("-")
    cursor.execute(f"SELECT paid from `purchases` WHERE user_id={callback_data.from_user.id} AND bill_id={bill_id}")
    paid = dict(cursor.fetchone())["paid"]

    if paid:
        await callback_data.message.reply(text=f"{hbold('–í–∞—à–∞ –ø–æ–∫—É–ø–∫–∞ #' + bill_id + ' :')}\n{content}",
                                          parse_mode=DEFAULT_PARSE_MODE)
    else:
        await callback_data.message.reply(text=f"{hbold('–≠—Ç–æ—Ç —Ç–æ–≤–∞—Ä –µ—â–µ –Ω–µ –æ–ø–ª–∞—á–µ–Ω')}", parse_mode=DEFAULT_PARSE_MODE)


@dp.message_handler(text="–û –º–∞–≥–∞–∑–∏–Ω–µ")
async def about(message: types.Message):
    text = f"üè† {hbold('–ú–∞–≥–∞–∑–∏–Ω')}: {SHOP_NAME}\n" \
           f"‚è∞ {hbold('–î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è')}: {CREATION_TIME}\n" \
           f"üì¢ {hbold('–ö–∞–Ω–∞–ª')}:  –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å ({CHANNEL_LINK})"
    await message.reply(text=text, parse_mode=DEFAULT_PARSE_MODE)


@dp.message_handler(text="–ü—Ä–∞–≤–∏–ª–∞")
async def rules(message: types.Message):
    text = f"{hbold('–ü—Ä–∞–≤–∏–ª–∞ –º–∞–≥–∞–∑–∏–Ω–∞:')}\n\n" + RULES
    await message.reply(text=text, parse_mode=DEFAULT_PARSE_MODE)


@dp.message_handler(text="–ü–æ–º–æ—â—å")
async def help_manager(message: types.Message):
    await message.reply(text=f"{hbold('–ó–∞ –ø–æ–º–æ—â—å—é –æ–±—Ä–∞—â–∞—Ç—å—Å—è –∫')} - " + SUPPORT_USERNAME,
                        parse_mode=DEFAULT_PARSE_MODE)


@dp.message_handler(commands=["start"])
async def start(message: types.Message):
    if cursor.execute(f"SELECT * FROM `users` WHERE user_id={message.from_user.id}") == 0:
        cursor.execute(f"INSERT INTO `users`(user_id, username, purchases) VALUES (%s, %s, %s)",
                       (message.from_user.id, message.from_user.username, 0))
        connection.commit()

    text = f"–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –º–∞–≥–∞–∑–∏–Ω {hbold(SHOP_NAME)}!\n\n\n" \
           f"–ù–∞–ª–∏—á–∏–µ –º–æ–∂–Ω–æ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –ø–æ –∫–Ω–æ–ø–∫–µ {hbold('–ù–∞–ª–∏—á–∏–µ —Ç–æ–≤–∞—Ä–∞')}.\n\n" \
           f"{hbold('–°–∞–ø–ø–æ—Ä—Ç')}: {SUPPORT_USERNAME}\n" \
           f"{hbold('–°–æ–∑–¥–∞—Ç–µ–ª—å')}: @dkhodos"
    await message.reply(text=text, reply_markup=main_keyboard, parse_mode=DEFAULT_PARSE_MODE)


@dp.message_handler(commands=["admin"])
async def admin_panel(message: types.Message):
    if message.from_user.id == ADMIN_ID:
        await message.reply(f"{hbold('–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ')}:",
                            reply_markup=admin_inline_keyboard, parse_mode=DEFAULT_PARSE_MODE)


@dp.callback_query_handler(text='add_product')
async def add_product(callback_data: types.CallbackQuery):
    await callback_data.message.edit_text(text=f"{hbold('–°–∫–∞—á–∞–π—Ç–µ —Ñ–∞–π–ª –∏ –∑–∞–ø–æ–ª–Ω–∏—Ç–µ –µ–≥–æ, –∑–∞—Ç–µ–º –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –æ–±—Ä–∞—Ç–Ω–æ')}:",
                                          parse_mode=DEFAULT_PARSE_MODE)
    await callback_data.message.reply_document(document=open("./output.xlsx", "rb"))
    await States.add_product.set()


@dp.message_handler(state=States.add_product, content_types=[ContentType.DOCUMENT])
async def add_product_state(message: types.Message, state: FSMContext):
    await message.document.download(destination_file="./temp_products.xlsx")

    for data in get_data_from_xlsx("./temp_products.xlsx"):
        category, product_name, desciption, price, content = data
        amount = len(content.split(";"))
        cursor.execute(
            f"INSERT INTO `products`(category, name, description, price, amount, content) VALUES (%s, %s, %s, %s, %s, %s)",
            (category, product_name, desciption, price, amount, content))
        connection.commit()
    await message.answer(text=f"{hbold('–¢–æ–≤–∞—Ä –±—ã–ª —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω')}", parse_mode=DEFAULT_PARSE_MODE)
    await state.finish()


@dp.callback_query_handler(text_startswith='update_product')
async def update_product(callback_data: types.CallbackQuery):
    cursor.execute(f"SELECT * FROM `products`")
    products_data = cursor.fetchall()

    keyboard = InlineKeyboardMarkup(row_width=1, inline_keyboard=[
        [InlineKeyboardButton(text=f"{products_data[i][category]} | {products_data[i][name]}",
                              callback_data=f"ut_{products_data[i][category]}_{products_data[i][name]}")] for
        _, category, name, _, _, _, _ in products_data for i in range(len(products_data))
    ])

    await callback_data.message.edit_text(text=f"{hbold('–í—ã–±–µ—Ä–∏—Ç–µ —Ç–æ–≤–∞—Ä –∫–æ—Ç–æ—Ä—ã–π —Ö–æ—Ç–∏—Ç–µ –æ–±–Ω–æ–≤–∏—Ç—å:')}",
                                          reply_markup=keyboard, parse_mode=DEFAULT_PARSE_MODE)


@dp.callback_query_handler(text_startswith='ut_')
async def choose_updated_product(callback_data: types.CallbackQuery):
    _, category, name = callback_data.data.split("_")

    keyboard = InlineKeyboardMarkup(row_width=3, inline_keyboard=[
        [
            InlineKeyboardButton(text="–ö–∞—Ç–µ–≥–æ—Ä–∏—é", callback_data=f"chg_ctgr_{category}_{name}"),
            InlineKeyboardButton(text="–ò–º—è", callback_data=f"chg_nm_{category}_{name}"),
            InlineKeyboardButton(text="–û–ø–∏—Å–∞–Ω–∏–µ", callback_data=f"chg_dscr_{category}_{name}"),
        ],
        [
            InlineKeyboardButton(text="–¶–µ–Ω—É", callback_data=f"chg_pr_{category}_{name}"),
            InlineKeyboardButton(text="–°–æ–¥–µ—Ä–∂–∏–º–æ–µ", callback_data=f"chg_cnt_{category}_{name}"),
        ]
    ])
    await callback_data.message.edit_text(text=f"{hbold('–ß—Ç–æ —Ö–æ—Ç–∏—Ç–µ –æ–±–Ω–æ–≤–∏—Ç—å:')}", reply_markup=keyboard,
                                          parse_mode=DEFAULT_PARSE_MODE)


@dp.callback_query_handler(text_startswith='chg_')
async def change_updated_product(callback_data: types.CallbackQuery):
    _, action, category, name = callback_data.data.split("_")

    state = Dispatcher.get_current().current_state()
    await state.update_data(product_category=category)
    await state.update_data(product_name=name)

    if action == "ctgr":
        await callback_data.message.edit_text(text=f"{hbold('–ù–∞–ø–∏—à–∏—Ç–µ –Ω–æ–≤—É—é –∫–∞—Ç–µ–≥–æ—Ä–∏—é:')}",
                                              parse_mode=DEFAULT_PARSE_MODE)
        await States.change_category.set()

    if action == "nm":
        await callback_data.message.edit_text(text=f"{hbold('–ù–∞–ø–∏—à–∏—Ç–µ –Ω–æ–≤–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ:')}",
                                              parse_mode=DEFAULT_PARSE_MODE)
        await States.change_name.set()

    if action == "dscr":
        await callback_data.message.edit_text(text=f"{hbold('–ù–∞–ø–∏—à–∏—Ç–µ –Ω–æ–≤–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ:')}",
                                              parse_mode=DEFAULT_PARSE_MODE)
        await States.change_description.set()

    if action == "pr":
        await callback_data.message.edit_text(text=f"{hbold('–ù–∞–ø–∏—à–∏—Ç–µ –Ω–æ–≤—É—é —Ü–µ–Ω—É —Ç–æ–≤–∞—Ä–∞:')}",
                                              parse_mode=DEFAULT_PARSE_MODE)
        await States.change_price.set()

    if action == "cnt":
        await callback_data.message.edit_text(text=f"{hbold('–ù–∞–ø–∏—à–∏—Ç–µ –Ω–æ–≤–æ–µ —Å–æ–¥–µ—Ä–∂–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞:')}",
                                              parse_mode=DEFAULT_PARSE_MODE)
        await States.change_content.set()


@dp.message_handler(state=States.change_category)
async def apply_changes(message: types.Message, state: FSMContext):
    await state.update_data(new_category=message.text)
    data = await state.get_data()
    new_category = data["new_category"]
    product_category = data["product_category"]
    product_name = data["product_name"]

    cursor.execute(
        f"UPDATE `products` SET category='{new_category}' WHERE category='{product_category}' AND name='{product_name}' AND id=1;")
    connection.commit()

    await message.answer(text=f"{hbold('–ö–∞—Ç–µ–≥–æ—Ä–∏—è —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∞')}", reply_markup=admin_inline_keyboard,
                         parse_mode=DEFAULT_PARSE_MODE)
    await state.finish()


@dp.message_handler(state=States.change_name)
async def apply_changes(message: types.Message, state: FSMContext):
    await state.update_data(new_name=message.text)
    data = await state.get_data()
    new_name = data["new_name"]
    product_category = data["product_category"]
    product_name = data["product_name"]

    cursor.execute(
        f"UPDATE `products` SET name='{new_name}' WHERE category='{product_category}' AND name='{product_name}' AND id=1;")
    connection.commit()

    await message.answer(text=f"{hbold('–ò–º—è —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–æ')}", reply_markup=admin_inline_keyboard,
                         parse_mode=DEFAULT_PARSE_MODE)
    await state.finish()


@dp.message_handler(state=States.change_description)
async def apply_changes(message: types.Message, state: FSMContext):
    await state.update_data(new_decr=message.text)
    data = await state.get_data()
    new_decr = data["new_decr"]
    product_category = data["product_category"]
    product_name = data["product_name"]

    cursor.execute(
        f"UPDATE `products` SET description='{new_decr}' WHERE category='{product_category}' AND name='{product_name}' AND id=1;")
    connection.commit()

    await message.answer(text=f"{hbold('–û–ø–∏—Å–∞–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–æ')}", reply_markup=admin_inline_keyboard,
                         parse_mode=DEFAULT_PARSE_MODE)
    await state.finish()


@dp.message_handler(state=States.change_price)
async def apply_changes(message: types.Message, state: FSMContext):
    await state.update_data(new_price=message.text)
    data = await state.get_data()
    new_price = data["new_price"]
    product_category = data["product_category"]
    product_name = data["product_name"]

    cursor.execute(
        f"UPDATE `products` SET price={new_price} WHERE category='{product_category}' AND name='{product_name}' AND id=1;")
    connection.commit()

    await message.answer(text=f"{hbold('–¶–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∞')}", reply_markup=admin_inline_keyboard,
                         parse_mode=DEFAULT_PARSE_MODE)
    await state.finish()


# @dp.message_handler(state=States.change_amount)
# async def apply_changes(message: types.Message, state: FSMContext):
#     await state.update_data(new_amount=message.text)
#     data = await state.get_data()
#     new_amount = data["new_amount"]
#     product_category = data["product_category"]
#     product_name = data["product_name"]
#
#     cursor.execute(
#         f"UPDATE `products` SET amount={new_amount} WHERE category='{product_category}' AND name='{product_name}' AND id=1;")
#     connection.commit()
#
#     await message.answer(text=f"{hbold('–ö–æ–ª-–≤–æ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–æ')}", reply_markup=admin_inline_keyboard,
#                          parse_mode=DEFAULT_PARSE_MODE)
#     await state.finish()


@dp.message_handler(state=States.change_content)
async def apply_changes(message: types.Message, state: FSMContext):
    await state.update_data(new_content=message.text)
    data = await state.get_data()
    new_content = data["new_content"]
    product_category = data["product_category"]
    product_name = data["product_name"]
    amount = len(new_content.split(";"))

    cursor.execute(
        f"UPDATE `products` SET content='{new_content}' WHERE category='{product_category}' AND name='{product_name}' AND id=1;")
    cursor.execute(
        f"UPDATE `products` SET amount={amount} WHERE category='{product_category}' AND name='{product_name}' AND id=1;")
    connection.commit()

    await message.answer(text=f"{hbold('–°–æ–¥–µ—Ä–∂–∞–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–æ')}", reply_markup=admin_inline_keyboard,
                         parse_mode=DEFAULT_PARSE_MODE)
    await state.finish()


@dp.message_handler(commands=["keyboard"])
async def show_keyboard(message: types.Message):
    await message.reply(text=f"{hbold('–ü–æ–∫–∞–∑—ã–≤–∞—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É')}", reply_markup=main_keyboard,
                        parse_mode=DEFAULT_PARSE_MODE)


@dp.callback_query_handler(text='delete_product')
async def delete_product(callback_data: types.CallbackQuery):
    cursor.execute(f"SELECT * FROM `products`")
    products_data = cursor.fetchall()
    keyboard = InlineKeyboardMarkup(row_width=1, inline_keyboard=[
        [InlineKeyboardButton(text=f"{products_data[i][category]} | {products_data[i][name]}",
                              callback_data=f"dlt_{products_data[i][category]}_{products_data[i][name]}")] for
        _, category, name, _, _, _, _ in products_data for i in range(len(products_data))
    ])

    await callback_data.message.edit_text(text=f"{hbold('–í—ã–±–µ—Ä–∏—Ç–µ —Ç–æ–≤–∞—Ä –∫–æ—Ç–æ—Ä—ã–π —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å:')}",
                                          reply_markup=keyboard, parse_mode=DEFAULT_PARSE_MODE)


@dp.callback_query_handler(text_startswith='dlt')
async def apply_changes(callback_data: types.CallbackQuery):
    _, category, name = callback_data.data.split("_")

    cursor.execute(f"DELETE from `products` WHERE category='{category}' and name='{name}'")
    connection.commit()

    await callback_data.message.edit_text(text=f"{hbold('–¢–æ–≤–∞—Ä ' + name + ' —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω')}",
                                          parse_mode=DEFAULT_PARSE_MODE)


@dp.callback_query_handler(text="delete_all_products")
async def delete_all_products(callback_data: types.CallbackQuery):
    cursor.execute("DELETE from `products`")
    connection.commit()

    keyboard = InlineKeyboardMarkup(row_width=2, inline_keyboard=[
        [
            InlineKeyboardButton(text="–£–≤–µ—Ä–µ–Ω", callback_data="delete_answer_yes"),
            InlineKeyboardButton(text="–û—Ç–º–µ–Ω–∏—Ç—å", callback_data="delete_answer_no"),
        ]
    ])
    await callback_data.message.edit_text(text=f"{hbold('–í—ã —É–≤–µ—Ä–µ–Ω—ã?')}",
                                          reply_markup=keyboard,
                                          parse_mode=DEFAULT_PARSE_MODE)


@dp.callback_query_handler(text_startswith="delete_answer")
async def delete_all_products(callback_data: types.CallbackQuery):
    _, _, answer = callback_data.data.split("_")

    if answer == "yes":
        cursor.execute("DELETE from `products`")
        connection.commit()

        await callback_data.message.edit_text(text=f"{hbold('–í—Å–µ —Ç–æ–≤–∞—Ä—ã –±—ã–ª–∏ —É–¥–∞–ª–µ–Ω—ã.')}",
                                              parse_mode=DEFAULT_PARSE_MODE)
    else:
        await callback_data.message.edit_text(text=f"{hbold('–£–¥–∞–ª–µ–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.')}", parse_mode=DEFAULT_PARSE_MODE)


if __name__ == '__main__':
    # register_all_message_functions(dp)
    # register_all_callback_functions(dp)

    executor.start_polling(dp, skip_updates=True)
